---
import Layout from '../layouts/Layout.astro';
import PomodoroIcon from '../components/icons/PomodoroIcon.astro';
import AudioOn from '../components/icons/AudioOn.astro';
import AudioOff from '../components/icons/AudioOff.astro';
import ButtonTimer from '../components/ButtonTimer.astro';
import ContentButtonsControl from '../components/ContentButtonsControl.astro';
---

<Layout>
    <section class="relative flex flex-col items-center justify-center gap-y-4 text-center my-8 w-[600px] rounded-[10px] bg-white p-4 sm:m-0 m-1 shadow-lg z-10">
        <div class="absolute h-full w-full bg-[radial-gradient(#e5e7eb_1px,transparent_0px)] [background-size:16px_16px] [mask-image:radial-gradient(ellipse_50%_50%_at_50%_50%,#000_70%,transparent_100%)]"></div>
        
        <h1 class="flex items-center justify-center gap-x-2 text-lg text-center text-black z-10">
            <span>Mi Pomodoro personal</span><br>
            <div id="audio-icons" class="absolute top-4 right-4 text-lg text-black">
                <AudioOn />
                <AudioOff />
            </div>    
        </h1>

        <!-- Botones Pomodoro, Descanso Corto y Descanso Largo -->
        <div class="flex flex-row items-center gap-x-0 justify-center py-1 px-1 border-2 border-gray-900 rounded-md z-10">
            <ButtonTimer id='pomodoro' name="Pomodoro" />
            <ButtonTimer id='descanso-corto' name="Descanso Corto" />
            <ButtonTimer id='descanso-largo' name="Descanso Largo" />
        </div>

        <!-- Timer comenzando en 25:00 y terminando en 00:00 -->
        <span id="timer" class="text-8xl text-center text-black z-10">05:00</span>

        <!-- Botones para iniciar y parar el timer -->
        <ContentButtonsControl id="pomodoro-buttons-control" />
        <ContentButtonsControl id="s-buttons-control" />
        <ContentButtonsControl id="l-buttons-control" />

        <!-- Texto con la cantidad de pomodoros completados -->
        <span class="flex items-center justify-center gap-x-2 text-lg text-center text-black z-10">
            <!-- Icono de tomate para el pomodoro con color rojo-->
            <PomodoroIcon />
            <span id="pomodoros">Pomodoros completados: <span id="pomodoros-count">0</span></span>
        </span>
    </section>
</Layout>

<script>

// Recogida de los elementos
const pomodoro = document.getElementById('pomodoro') as HTMLElement | null;
const descansoCorto = document.getElementById('descanso-corto') as HTMLElement | null;
const descansoLargo = document.getElementById('descanso-largo') as HTMLElement | null;

const pomodoroButtonsControl = document.getElementById('pomodoro-buttons-control') as HTMLElement | null;
const sButtonsControl = document.getElementById('s-buttons-control') as HTMLElement | null;
const lButtonsControl = document.getElementById('l-buttons-control') as HTMLElement | null;

const pomodorosCount = document.getElementById('pomodoros-count') as HTMLElement | null;

const audio = new Audio('/assets/media/ma-meilleure-ennemie.mp3');
const audioPomodoro = new Audio('/assets/media/final-pomodoro.mp3');

const videoBackground = document.getElementsByClassName('video-background')[0] as HTMLElement | null;
const video = document.getElementById('video') as HTMLVideoElement | null;
const timer = document.getElementById('timer') as HTMLElement | null;

let intervalId: number | null = null;
let pomodoros = 0;
let currentMode = 'pomodoro';

const audionOn = document.getElementById('audio-on') as HTMLElement | null;
const audionOff = document.getElementById('audio-off') as HTMLElement | null;

// Manejar audio on/off
if (audionOn && audionOff) {
    audionOn.addEventListener('click', () => {
        audio.volume = 1;
        audionOn.style.display = 'none';
        audionOff.style.display = 'flex';
    });

    audionOff.addEventListener('click', () => {
        audio.volume = 0;
        audionOff.style.display = 'none';
        audionOn.style.display = 'flex';
    });
}

// Función para limpiar todo al cambiar de pestaña
function resetAll(): void {
    if (intervalId !== null) {
        clearInterval(intervalId);
        intervalId = null;
    }
    
    audio.pause();
    audio.currentTime = 0;
    if (video) {
        video.pause();
        video.currentTime = 0;
    }
    if (videoBackground) {
        videoBackground.style.display = 'none';
    }
}

// Función para eliminar todos los event listeners de botones clonándolos
function cleanButtonListeners(container: HTMLElement): void {
    const iniciar = container.querySelector('button:nth-child(1)') as HTMLElement;
    const resetear = container.querySelector('button:nth-child(2)') as HTMLElement;
    const parar = container.querySelector('button:nth-child(3)') as HTMLElement;
    
    if (iniciar) iniciar.replaceWith(iniciar.cloneNode(true));
    if (resetear) resetear.replaceWith(resetear.cloneNode(true));
    if (parar) parar.replaceWith(parar.cloneNode(true));
}

// Función para configurar event listeners de botones
function setupControlButtons(container: HTMLElement, defaultTime: string, durationMinutes: number): void {
    if (!container || !timer) return;
    
    // Limpiar listeners anteriores
    cleanButtonListeners(container);
    
    // Obtener botones después de la limpieza
    const iniciar = container.querySelector('button:nth-child(1)') as HTMLElement;
    const resetear = container.querySelector('button:nth-child(2)') as HTMLElement;
    const parar = container.querySelector('button:nth-child(3)') as HTMLElement;
    
    if (iniciar && resetear && parar) {
        // Botón Iniciar
        iniciar.addEventListener('click', () => {
            // if (currentMode === 'pomodoro' && videoBackground && video) {
            if (videoBackground && video) {
                videoBackground.style.display = 'block';
                video.play();
                audio.play();
            }
            
            if (intervalId !== null) {
                clearInterval(intervalId);
            }
            const timeString = timer?.textContent || defaultTime;
            const [minutes, seconds] = timeString.split(":").map(Number);
            startTimer(minutes * 60 + seconds);
        });

        // Botón Resetear
        resetear.addEventListener('click', () => {
            // if (currentMode === 'pomodoro' && videoBackground && video) {
            if (videoBackground && video) {
                videoBackground.style.display = 'block';
                video.currentTime = 0;
                video.play();
                audio.currentTime = 0;
                audio.play();
            }
            
            if (intervalId !== null) {
                clearInterval(intervalId);
            }
            if (timer) {
                timer.textContent = defaultTime;
            }
            startTimer(durationMinutes * 60);
        });

        // Botón Parar
        parar.addEventListener('click', () => {
            if (video) video.pause();
            audio.pause();
            
            if (intervalId !== null) {
                clearInterval(intervalId);
                intervalId = null;
            }
        });
    }
}

// Eventos principales
if (pomodoro && descansoCorto && descansoLargo) {
    pomodoro.classList.add('active');
    descansoCorto.classList.remove('active');
    descansoLargo.classList.remove('active');

    startTimerPomodoro();

    pomodoro.addEventListener('click', () => {
        resetAll();
        startTimerPomodoro();
    });

    descansoCorto.addEventListener('click', () => {
        resetAll();
        startTimerDescansoCorto();
    });

    descansoLargo.addEventListener('click', () => {
        resetAll();
        startTimerDescansoLargo();
    });
}

// Función para convertir minutos y segundos a un formato mm:ss
function formatTime(minutes: number, seconds: number): string {
    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
}

// Función para iniciar el temporizador
function startTimer(duration: number): void {
    let remainingTime = duration;
    const valueInit = timer?.textContent || null;

    intervalId = window.setInterval(() => {
        const minutes = Math.floor(remainingTime / 60);
        const seconds = remainingTime % 60;

        if (timer) {
            timer.textContent = formatTime(minutes, seconds);
        }

        if (remainingTime === 0) {
            if (intervalId !== null) {
                clearInterval(intervalId);
                intervalId = null;
            }
            
            // Solo contar pomodoros si estamos en modo pomodoro
            if (currentMode === 'pomodoro' && pomodorosCount) {
                pomodoros++;
                console.log(`¡Pomodoro completado! Total: ${pomodoros}`);
                pomodorosCount.textContent = String(pomodoros);
                audioPomodoro.play();
            }
            
            // Resetear timer al valor inicial
            if (timer) {
                if (currentMode === 'pomodoro') timer.textContent = '25:00';
                else if (currentMode === 'descanso-corto') timer.textContent = '05:00';
                else if (currentMode === 'descanso-largo') timer.textContent = '15:00';
            }
            
            // Parar video y audio
            if (videoBackground) videoBackground.style.display = 'none';
            audio.pause();
            audio.currentTime = 0;
            if (video) {
                video.pause();
                video.currentTime = 0;
            }
        } else {
            remainingTime--;
        }
    }, 1000);
}

function startTimerPomodoro(): void {
    if (pomodoro && descansoCorto && descansoLargo) {
        currentMode = 'pomodoro';
        
        pomodoro.classList.add('active');
        descansoCorto.classList.remove('active');
        descansoLargo.classList.remove('active');

        if (timer) {
            timer.textContent = '25:00';
        }

        if (pomodoroButtonsControl && sButtonsControl && lButtonsControl) {
            pomodoroButtonsControl.style.display = 'flex';
            sButtonsControl.style.display = 'none';
            lButtonsControl.style.display = 'none';

            setupControlButtons(pomodoroButtonsControl, '25:00', 25);
        }
    }
}

function startTimerDescansoCorto(): void {
    if (pomodoro && descansoCorto && descansoLargo) {
        currentMode = 'descanso-corto';
        
        descansoCorto.classList.add('active');   
        pomodoro.classList.remove('active');
        descansoLargo.classList.remove('active');

        if (timer) {
            timer.textContent = '05:00';
        }

        if (pomodoroButtonsControl && sButtonsControl && lButtonsControl) {
            pomodoroButtonsControl.style.display = 'none';
            sButtonsControl.style.display = 'flex';
            lButtonsControl.style.display = 'none';

            setupControlButtons(sButtonsControl, '05:00', 5);
        }
    }
}

function startTimerDescansoLargo(): void {
    if (pomodoro && descansoCorto && descansoLargo) {
        currentMode = 'descanso-largo';
        
        descansoLargo.classList.add('active');
        pomodoro.classList.remove('active');
        descansoCorto.classList.remove('active');

        if (timer) {
            timer.textContent = '15:00';
        }

        if (pomodoroButtonsControl && sButtonsControl && lButtonsControl) {
            pomodoroButtonsControl.style.display = 'none';
            sButtonsControl.style.display = 'none';
            lButtonsControl.style.display = 'flex';

            setupControlButtons(lButtonsControl, '15:00', 15);
        }
    }
}

// Configurar loop de audio solo para pomodoro
audio.addEventListener('ended', () => {
    // if (currentMode === 'pomodoro') {
        audio.currentTime = 0;
        audio.play();
    // }
});

</script>