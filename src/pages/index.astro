---
import Layout from '../layouts/Layout.astro';
import PomodoroIcon from '../components/icons/PomodoroIcon.astro';
import ButtonTimer from '../components/ButtonTimer.astro';
import ContentButtonsControl from '../components/ContentButtonsControl.astro';
---

<Layout>
    <!-- <div class="absolute h-full w-full bg-[radial-gradient(#0505_1px,transparent_1px)] [background-size:16px_16px] [mask-image:radial-gradient(ellipse_50%_50%_at_50%_50%,#000_70%,transparent_100%)]"></div> -->
    <section class="flex flex-col items-center justify-center gap-y-4 text-center my-8 w-[600px] rounded-[10px] bg-white p-4 shadow-lg z-10">
        <div class="absolute h-full w-full bg-[radial-gradient(#e5e7eb_1px,transparent_0px)] [background-size:16px_16px] [mask-image:radial-gradient(ellipse_50%_50%_at_50%_50%,#000_70%,transparent_100%)]"></div>
        <h1 class="flex items-center justify-center gap-x-2 text-lg text-center text-black z-10">
            <span>Mi Pomodoro personal</span>
        </h1>
        
        <!-- Botones Pomodoro, Descanso Corto y Descanso Largo -->
        <div class="flex flex-row items-center gap-x-0 justify-center py-1 px-1 border-2 border-gray-900 rounded-md z-10">
            <ButtonTimer id='pomodoro' name="Pomodoro" />
            <ButtonTimer id='descanso-corto' name="Descanso Corto" />
            <ButtonTimer id='descanso-largo' name="Descanso Largo" />
        </div>

        <!-- Timer comenzando en 25:00 y terminando en 00:00 -->
        <span id="timer" class="text-8xl text-center text-black z-10">25:00</span>

        <!-- Botones para iniciar y parar el timer -->
        <ContentButtonsControl id="pomodoro-buttons-control" />
        <ContentButtonsControl id="s-buttons-control" />
        <ContentButtonsControl id="l-buttons-control" />

        <!-- Texto con la cantidad de pomodoros completados -->
        <span class="flex items-center justify-center gap-x-2 text-lg text-center text-black z-10">
            <!-- Icono de tomate para el pomodoro con color rojo-->
            <PomodoroIcon />
            <span id="pomodoros">Pomodoros completados: <span id="pomodoros-count">0</span></span>
        </span>
    </section>
</Layout>

<script>

    // Recogida de los elementos
    const pomodoro = document.getElementById('pomodoro') as HTMLElement | null;
    const descansoCorto = document.getElementById('descanso-corto') as HTMLElement | null;
    const descansoLargo = document.getElementById('descanso-largo') as HTMLElement | null;

    const pomodoroButtonsControl = document.getElementById('pomodoro-buttons-control') as HTMLElement | null;
    const sButtonsControl = document.getElementById('s-buttons-control') as HTMLElement | null;
    const lButtonsControl = document.getElementById('l-buttons-control') as HTMLElement | null;

    const iniciar = document.getElementById('iniciar') as HTMLElement | null;
    const resetear = document.getElementById('resetear') as HTMLElement | null;
    const parar = document.getElementById('parar') as HTMLElement | null;

    const pomodorosCount = document.getElementById('pomodoros-count') as HTMLElement | null;

    const audio = new Audio('/assets/media/ma-meilleure-ennemie.mp3');
    const videoBackground = document.getElementsByClassName('video-background')[0] as HTMLElement | null;
    const video = document.getElementById('video') as HTMLVideoElement | null;
    const timer = document.getElementById('timer') as HTMLElement | null;

    let intervalId: number | null = null;
    let pomodoros = 0;

    // Eventos
    if (pomodoro && descansoCorto && descansoLargo) {
        pomodoro.classList.add('active');
        descansoCorto.classList.remove('active');
        descansoLargo.classList.remove('active');

        startTimerPomodoro();

        pomodoro.addEventListener('click', () => {
            startTimerPomodoro();
        });

        descansoCorto.addEventListener('click', () => {
            startTimerDescansoCorto();
        });

        descansoLargo.addEventListener('click', () => {
            startTimerDescansoLargo();
        });
    }

    // Función para convertir minutos y segundos a un formato mm:ss
    function formatTime(minutes: number, seconds: number): string {
        return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
    }

    // Función para iniciar el temporizador
    function startTimer(duration: number): void {
        let remainingTime = duration; // Tiempo en segundos (25 minutos = 1500 segundos)
        const valueInit = timer?.textContent || '25:00'; // Obtenemos el valor inicial del temporizador

        intervalId = window.setInterval(() => {
            // Calculamos minutos y segundos restantes
            const minutes = Math.floor(remainingTime / 60);
            const seconds = remainingTime % 60;

            // Actualizamos el texto del temporizador
            if (timer) {
                timer.textContent = formatTime(minutes, seconds);
            }

            if (remainingTime === 0) {
                if (intervalId !== null) {
                    clearInterval(intervalId);
                    intervalId = null; // Reiniciamos el intervalo
                }
                if (timer) {
                    timer.textContent = valueInit; // Reiniciamos el temporizador
                }
                pomodoros++; // Sumamos un pomodoro
                console.log(`¡Pomodoro completado! Total: ${pomodoros}`);
                // Puedes reproducir un sonido o hacer algo adicional aquí
            } else {
                remainingTime--; // Reducimos el tiempo restante
            }
        }, 1000); // Se ejecuta cada segundo
    }

    function startTimerPomodoro(): void {
        if (pomodoro && descansoCorto && descansoLargo) {
            pomodoro.classList.add('active');
            descansoCorto.classList.remove('active');
            descansoLargo.classList.remove('active');

            if (timer && pomodorosCount) {
                timer.textContent = '25:00'; // Setear el valor del timer
            }

            // Mostrar los botones de control
            if (pomodoroButtonsControl && sButtonsControl && lButtonsControl) {
                pomodoroButtonsControl.style.display = 'flex';
                sButtonsControl.style.display = 'none';
                lButtonsControl.style.display = 'none';

                if (iniciar && resetear && parar && videoBackground && video) {
                    iniciar.addEventListener('click', () => {
                        videoBackground.style.display = 'block';
                        video.play();
                        audio.play();

                        if (intervalId !== null) {
                            clearInterval(intervalId); // Reiniciamos si ya había un temporizador corriendo
                        }
                        startTimer(25 * 60); // Iniciamos con 25 minutos
                    });

                    resetear.addEventListener('click', () => {
                        video.currentTime = 0;
                        video.play();
                        audio.currentTime = 0;
                        audio.play();

                        if (intervalId !== null) {
                            clearInterval(intervalId); // Reiniciamos si ya había un temporizador corriendo
                        }
                        startTimer(25 * 60); // Iniciamos con 25 minutos
                    });

                    parar.addEventListener('click', () => {
                        video.pause();
                        audio.pause();

                        if (intervalId !== null) {
                            clearInterval(intervalId); // Detenemos el temporizador
                            intervalId = null;
                        }
                    });

                    // Reproducir siempre el audio
                    audio.addEventListener('ended', () => {
                        audio.currentTime = 0;
                        audio.play();
                    });
                }
            }
        }
    }

    function startTimerDescansoCorto(): void {
        if (pomodoro && descansoCorto && descansoLargo) {
            descansoCorto.classList.add('active');
            pomodoro.classList.remove('active');
            descansoLargo.classList.remove('active');
            audio.pause();
            audio.currentTime = 0;
            if (intervalId !== null) {
                clearInterval(intervalId); // Detenemos el temporizador
                intervalId = null;
            }

            if (timer && pomodorosCount) {
                timer.textContent = '05:00'; 
            }

            if (pomodoroButtonsControl && sButtonsControl && lButtonsControl) {
                pomodoroButtonsControl.style.display = 'none';
                sButtonsControl.style.display = 'flex';
                lButtonsControl.style.display = 'none';
            }
        }
    }

    function startTimerDescansoLargo(): void {
        if (pomodoro && descansoCorto && descansoLargo) {
            descansoLargo.classList.add('active');
            pomodoro.classList.remove('active');
            descansoCorto.classList.remove('active');
            audio.pause();
            audio.currentTime = 0;
            if (intervalId !== null) {
                clearInterval(intervalId); // Detenemos el temporizador
                intervalId = null;
            }

            if (timer && pomodorosCount) {
                timer.textContent = '15:00';
            }

            if (pomodoroButtonsControl && sButtonsControl && lButtonsControl) {
                pomodoroButtonsControl.style.display = 'none';
                sButtonsControl.style.display = 'none';
                lButtonsControl.style.display = 'flex';
            }
        }
    }

</script>